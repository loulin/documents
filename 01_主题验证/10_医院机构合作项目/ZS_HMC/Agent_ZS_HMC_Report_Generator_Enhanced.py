#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Agent_ZS: ‰∏≠Â±±HMC CGMÊä•ÂëäÁîüÊàêÂô® v2.0 (Â¢ûÂº∫Áâà)
Âü∫‰∫éGPlusÊä•ÂëäÊ†∑ÂºèÁöÑÂèØËßÜÂåñÂ¢ûÂº∫ÁâàÊú¨

üé® Êñ∞Â¢ûÂäüËÉΩ (Âü∫‰∫éGPlus PDFÊ®°Êùø):
‚úÖ AGP (Ambulatory Glucose Profile) ÂèØËßÜÂåñ
‚úÖ 14Â§©ÊØèÊó•Ë°ÄÁ≥ñÊõ≤Á∫øÂ∞èÂõæ (Small Multiples)
‚úÖ TIR/TAR/TBR Â†ÜÂè†Êü±Áä∂Âõæ
‚úÖ ÁôæÂàÜ‰ΩçÊï∞Â∏¶Áä∂Âõæ (5-95%, 25-75%)
‚úÖ HTML‰∏ì‰∏öÊä•ÂëäÂØºÂá∫ (ÂèØÊâìÂç∞‰∏∫PDF)
‚úÖ ÂìçÂ∫îÂºèÂõæË°®Â∏ÉÂ±Ä

ÁâàÊú¨: 2.0 Enhanced
Êó•Êúü: 2025-10-09
‰ΩúËÄÖ: Enhanced based on GPlus Report Template
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

class ZSHMCReportGeneratorEnhanced:
    """‰∏≠Â±±HMC CGMÊä•ÂëäÁîüÊàêÂô® - Â¢ûÂº∫ÁâàÔºàÂê´GPlusÊ†∑ÂºèÂèØËßÜÂåñÔºâ"""

    def __init__(self):
        """ÂàùÂßãÂåñÊä•ÂëäÁîüÊàêÂô®"""
        self.version = "2.0-Enhanced"
        self.agent_type = "Agent_ZS_Enhanced"
        self.institution = "‰∏≠Â±±ÂÅ•Â∫∑ÁÆ°ÁêÜ‰∏≠ÂøÉ (ZSHMC)"

    def generate_html_report(self, filepath: str, patient_id: str = None,
                           patient_info: Dict = None, medication_data: Dict = None,
                           output_path: str = None) -> str:
        """
        ÁîüÊàêÂ∏¶ÂèØËßÜÂåñÁöÑHTMLÊä•ÂëäÔºàGPlusÊ†∑ÂºèÔºâ

        Args:
            filepath: Ë°ÄÁ≥ñÊï∞ÊçÆÊñá‰ª∂Ë∑ØÂæÑ
            patient_id: ÊÇ£ËÄÖID
            patient_info: ÊÇ£ËÄÖÂü∫Êú¨‰ø°ÊÅØ
            medication_data: Áî®ËçØ‰ø°ÊÅØ
            output_path: HTMLËæìÂá∫Ë∑ØÂæÑ

        Returns:
            HTMLÊñá‰ª∂Ë∑ØÂæÑ
        """
        # Âä†ËΩΩÊï∞ÊçÆ
        df = self._load_data(filepath)

        # ÁîüÊàêÂàÜÊûêÊï∞ÊçÆ
        analysis = self._comprehensive_analysis(df, patient_info, medication_data)

        # ÁîüÊàêHTML
        html_content = self._generate_html_content(analysis, patient_id, patient_info)

        # ‰øùÂ≠òHTML
        if output_path is None:
            output_path = f"ZS_HMC_CGM_Report_{patient_id or 'Unknown'}_{datetime.now().strftime('%Y%m%d')}.html"

        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)

        print(f"‚úÖ HTMLÊä•ÂëäÂ∑≤ÁîüÊàê: {output_path}")
        return output_path

    def _load_data(self, filepath: str) -> pd.DataFrame:
        """Âä†ËΩΩCGMÊï∞ÊçÆ"""
        try:
            df = pd.read_csv(filepath)

            # Ê†áÂáÜÂåñÂàóÂêç
            column_mapping = {
                'timestamp': 'timestamp',
                'Timestamp': 'timestamp',
                'time': 'timestamp',
                'glucose': 'glucose_value',
                'Glucose': 'glucose_value',
                'glucose_value': 'glucose_value',
                'value': 'glucose_value'
            }

            df = df.rename(columns=column_mapping)

            # Á°Æ‰øùtimestampÊòØdatetimeÁ±ªÂûã
            if 'timestamp' in df.columns:
                df['timestamp'] = pd.to_datetime(df['timestamp'])

            return df
        except Exception as e:
            raise ValueError(f"Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•: {e}")

    def _comprehensive_analysis(self, df: pd.DataFrame, patient_info: Dict,
                                medication_data: Dict) -> Dict:
        """ÁªºÂêàÂàÜÊûê"""
        glucose_values = df['glucose_value'].dropna().values
        timestamps = df['timestamp'].values

        # Âü∫Á°ÄÊåáÊ†á
        mean_glucose = np.mean(glucose_values)
        std_glucose = np.std(glucose_values)
        gmi = 3.31 + (0.02392 * mean_glucose * 18.018)

        # TIR/TAR/TBR
        tir = np.sum((glucose_values >= 3.9) & (glucose_values <= 10.0)) / len(glucose_values) * 100
        tar_level1 = np.sum((glucose_values > 10.0) & (glucose_values <= 13.9)) / len(glucose_values) * 100
        tar_level2 = np.sum(glucose_values > 13.9) / len(glucose_values) * 100
        tar = tar_level1 + tar_level2

        tbr_level1 = np.sum((glucose_values >= 3.0) & (glucose_values < 3.9)) / len(glucose_values) * 100
        tbr_level2 = np.sum(glucose_values < 3.0) / len(glucose_values) * 100
        tbr = tbr_level1 + tbr_level2

        # CV
        cv = (std_glucose / mean_glucose) * 100 if mean_glucose > 0 else 0

        # AGPÊï∞ÊçÆÔºàÁôæÂàÜ‰ΩçÊï∞Ôºâ
        agp_data = self._calculate_agp_profile(df)

        # ÊØèÊó•Êï∞ÊçÆ
        daily_data = self._calculate_daily_metrics(df)

        return {
            "summary_metrics": {
                "mean_glucose": mean_glucose,
                "gmi": gmi,
                "cv": cv,
                "tir": tir,
                "tar": tar,
                "tar_level1": tar_level1,
                "tar_level2": tar_level2,
                "tbr": tbr,
                "tbr_level1": tbr_level1,
                "tbr_level2": tbr_level2,
                "monitoring_days": len(daily_data),
                "total_points": len(glucose_values)
            },
            "agp_profile": agp_data,
            "daily_data": daily_data,
            "patient_info": patient_info or {},
            "medication_data": medication_data or {}
        }

    def _calculate_agp_profile(self, df: pd.DataFrame) -> Dict:
        """ËÆ°ÁÆóAGPÊõ≤Á∫øÊï∞ÊçÆÔºàÊØèÂ∞èÊó∂ÁöÑÁôæÂàÜ‰ΩçÊï∞Ôºâ"""
        df = df.copy()
        df['hour'] = df['timestamp'].dt.hour
        df['minute'] = df['timestamp'].dt.minute
        df['time_of_day'] = df['hour'] + df['minute'] / 60.0

        # ÊåâÊó∂Èó¥ÁÇπÂàÜÁªÑ
        time_bins = np.arange(0, 24, 0.25)  # ÊØè15ÂàÜÈíü‰∏Ä‰∏™ÁÇπ
        agp_profile = {
            "time_points": [],
            "p5": [],
            "p25": [],
            "p50": [],
            "p75": [],
            "p95": []
        }

        for t in time_bins:
            # Ëé∑ÂèñËØ•Êó∂Èó¥ÊÆµÈôÑËøëÁöÑÊï∞ÊçÆÔºà¬±15ÂàÜÈíüÔºâ
            mask = (df['time_of_day'] >= t - 0.25) & (df['time_of_day'] < t + 0.25)
            values = df[mask]['glucose_value'].dropna().values

            if len(values) > 0:
                agp_profile["time_points"].append(t)
                agp_profile["p5"].append(np.percentile(values, 5))
                agp_profile["p25"].append(np.percentile(values, 25))
                agp_profile["p50"].append(np.percentile(values, 50))
                agp_profile["p75"].append(np.percentile(values, 75))
                agp_profile["p95"].append(np.percentile(values, 95))

        return agp_profile

    def _calculate_daily_metrics(self, df: pd.DataFrame) -> List[Dict]:
        """ËÆ°ÁÆóÊØèÊó•ÊåáÊ†á"""
        df = df.copy()
        df['date'] = df['timestamp'].dt.date

        daily_data = []
        for date, group in df.groupby('date'):
            values = group['glucose_value'].dropna().values

            if len(values) == 0:
                continue

            mean_glucose = np.mean(values)
            std_glucose = np.std(values)

            daily_data.append({
                "date": str(date),
                "mean_glucose": mean_glucose,
                "std": std_glucose,
                "cv": (std_glucose / mean_glucose * 100) if mean_glucose > 0 else 0,
                "tir": np.sum((values >= 3.9) & (values <= 10.0)) / len(values) * 100,
                "tar": np.sum(values > 10.0) / len(values) * 100,
                "tbr": np.sum(values < 3.9) / len(values) * 100,
                "data_points": len(values),
                "glucose_values": values.tolist(),
                "timestamps": group['timestamp'].dt.strftime('%H:%M').tolist()
            })

        return daily_data

    def _generate_html_content(self, analysis: Dict, patient_id: str,
                              patient_info: Dict) -> str:
        """ÁîüÊàêHTMLÂÜÖÂÆπ"""
        summary = analysis['summary_metrics']
        agp = analysis['agp_profile']
        daily_data = analysis['daily_data']

        html = f"""<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‰∏≠Â±±HMC CGMÊä•Âëä - {patient_id or 'Êú™ÂëΩÂêçÊÇ£ËÄÖ'}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
        @page {{
            size: A4;
            margin: 1.5cm;
        }}

        body {{
            font-family: "PingFang SC", "Microsoft YaHei", Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
        }}

        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}

        .header {{
            border-bottom: 3px solid #2196F3;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}

        .header h1 {{
            color: #1976D2;
            margin: 0 0 10px 0;
            font-size: 28px;
        }}

        .header .patient-info {{
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-top: 15px;
            font-size: 14px;
        }}

        .info-item {{
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
        }}

        .info-label {{
            font-weight: 600;
            color: #555;
        }}

        .metrics-summary {{
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin: 30px 0;
        }}

        .metric-card {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }}

        .metric-card.green {{
            background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);
        }}

        .metric-card.orange {{
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }}

        .metric-value {{
            font-size: 36px;
            font-weight: bold;
            margin: 10px 0;
        }}

        .metric-label {{
            font-size: 14px;
            opacity: 0.9;
        }}

        .metric-reference {{
            font-size: 12px;
            margin-top: 5px;
            opacity: 0.8;
        }}

        .section {{
            margin: 40px 0;
            page-break-inside: avoid;
        }}

        .section-title {{
            font-size: 20px;
            color: #1976D2;
            border-left: 4px solid #2196F3;
            padding-left: 12px;
            margin-bottom: 20px;
        }}

        .chart-container {{
            position: relative;
            height: 300px;
            margin: 20px 0;
        }}

        .chart-container.agp {{
            height: 400px;
        }}

        .daily-grid {{
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 15px;
            margin-top: 20px;
        }}

        .daily-card {{
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 10px;
            background: #fafafa;
        }}

        .daily-date {{
            font-weight: 600;
            font-size: 12px;
            color: #1976D2;
            margin-bottom: 5px;
            text-align: center;
        }}

        .daily-chart {{
            height: 100px;
            margin: 10px 0;
        }}

        .daily-metrics {{
            font-size: 11px;
            line-height: 1.4;
        }}

        .metric-row {{
            display: flex;
            justify-content: space-between;
            margin: 2px 0;
        }}

        .tir-bar {{
            display: flex;
            height: 24px;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }}

        .tir-segment {{
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: 600;
            color: white;
        }}

        .tir-segment.tbr {{
            background: #f44336;
        }}

        .tir-segment.tir {{
            background: #4caf50;
        }}

        .tir-segment.tar {{
            background: #ff9800;
        }}

        @media print {{
            body {{
                background: white;
                padding: 0;
            }}

            .container {{
                box-shadow: none;
                padding: 0;
            }}

            .section {{
                page-break-inside: avoid;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <!-- Êä•ÂëäÂ§¥ÈÉ® -->
        <div class="header">
            <h1>üè• ‰∏≠Â±±ÂÅ•Â∫∑ÁÆ°ÁêÜ‰∏≠ÂøÉ - ÊåÅÁª≠Ë°ÄÁ≥ñÁõëÊµãÊä•Âëä</h1>
            <div class="patient-info">
                <div class="info-item">
                    <span class="info-label">ÊÇ£ËÄÖID:</span> {patient_id or 'Êú™Êèê‰æõ'}
                </div>
                <div class="info-item">
                    <span class="info-label">ÂßìÂêç:</span> {patient_info.get('name', 'Êú™Êèê‰æõ') if patient_info else 'Êú™Êèê‰æõ'}
                </div>
                <div class="info-item">
                    <span class="info-label">ÊÄßÂà´:</span> {patient_info.get('gender', 'Êú™Êèê‰æõ') if patient_info else 'Êú™Êèê‰æõ'}
                </div>
                <div class="info-item">
                    <span class="info-label">Âπ¥ÈæÑ:</span> {patient_info.get('age', 'Êú™Êèê‰æõ') if patient_info else 'Êú™Êèê‰æõ'}
                </div>
                <div class="info-item">
                    <span class="info-label">ÁõëÊµãÂ§©Êï∞:</span> {summary['monitoring_days']}Â§©
                </div>
                <div class="info-item">
                    <span class="info-label">Êä•ÂëäÊó•Êúü:</span> {datetime.now().strftime('%Y-%m-%d')}
                </div>
            </div>
        </div>

        <!-- Ê†∏ÂøÉÊåáÊ†áÊëòË¶Å -->
        <div class="metrics-summary">
            <div class="metric-card">
                <div class="metric-label">Âπ≥ÂùáË°ÄÁ≥ñ (MG)</div>
                <div class="metric-value">{summary['mean_glucose']:.1f}</div>
                <div class="metric-reference">mmol/L</div>
            </div>
            <div class="metric-card green">
                <div class="metric-label">Ë°ÄÁ≥ñÁÆ°ÁêÜÊåáÊ†á (GMI)</div>
                <div class="metric-value">{summary['gmi']:.1f}%</div>
                <div class="metric-reference">ÁõÆÊ†á &lt; 7.0%</div>
            </div>
            <div class="metric-card orange">
                <div class="metric-label">ÁõÆÊ†áËåÉÂõ¥ÂÜÖÊó∂Èó¥ (TIR)</div>
                <div class="metric-value">{summary['tir']:.1f}%</div>
                <div class="metric-reference">ÁõÆÊ†á &gt; 70%</div>
            </div>
        </div>

        <!-- TIRÂèØËßÜÂåñÊù° -->
        <div class="section">
            <h2 class="section-title">üìä Ë°ÄÁ≥ñÂàÜÂ∏ÉÊÄªËßà</h2>
            <div class="tir-bar">
                <div class="tir-segment tbr" style="width: {summary['tbr']:.1f}%">
                    {f"{summary['tbr']:.1f}%" if summary['tbr'] > 5 else ""}
                </div>
                <div class="tir-segment tir" style="width: {summary['tir']:.1f}%">
                    TIR {summary['tir']:.1f}%
                </div>
                <div class="tir-segment tar" style="width: {summary['tar']:.1f}%">
                    {f"{summary['tar']:.1f}%" if summary['tar'] > 5 else ""}
                </div>
            </div>
            <div style="display: flex; justify-content: space-between; font-size: 12px; margin-top: 5px;">
                <span style="color: #f44336;">‚óº TBR (&lt;3.9): {summary['tbr']:.1f}%</span>
                <span style="color: #4caf50;">‚óº TIR (3.9-10.0): {summary['tir']:.1f}%</span>
                <span style="color: #ff9800;">‚óº TAR (&gt;10.0): {summary['tar']:.1f}%</span>
            </div>
        </div>

        <!-- AGPÊõ≤Á∫ø -->
        <div class="section">
            <h2 class="section-title">üìà AGP (Âä®ÊÄÅË°ÄÁ≥ñÂõæË∞±)</h2>
            <div class="chart-container agp">
                <canvas id="agpChart"></canvas>
            </div>
            <div style="font-size: 12px; color: #666; margin-top: 10px;">
                <p><strong>Ëß£ËØªËØ¥Êòé:</strong>
                ÊµÖËìùËâ≤Âå∫Âüü‰ª£Ë°®5-95%ÁôæÂàÜ‰ΩçÊï∞ËåÉÂõ¥ÔºåÊ∑±ËìùËâ≤Âå∫Âüü‰ª£Ë°®25-75%ÁôæÂàÜ‰ΩçÊï∞ËåÉÂõ¥Ôºå
                ‰∏≠Èó¥Á∫ø‰∏∫‰∏≠‰ΩçÊï∞(50%)„ÄÇÁªøËâ≤Â∏¶‰∏∫ÁõÆÊ†áËåÉÂõ¥(3.9-10.0 mmol/L)„ÄÇ
                </p>
            </div>
        </div>

        <!-- ÊØèÊó•Ë°ÄÁ≥ñÊõ≤Á∫ø -->
        <div class="section">
            <h2 class="section-title">üìÖ 14Â§©ÊØèÊó•Ë°ÄÁ≥ñÊõ≤Á∫ø</h2>
            <div class="daily-grid">
"""

        # Ê∑ªÂä†ÊØèÊó•Â∞èÂõæ
        for i, day_data in enumerate(daily_data[:14]):  # ÊúÄÂ§öÊòæÁ§∫14Â§©
            html += f"""
                <div class="daily-card">
                    <div class="daily-date">{day_data['date']}</div>
                    <div class="daily-chart">
                        <canvas id="dailyChart{i}"></canvas>
                    </div>
                    <div class="daily-metrics">
                        <div class="metric-row">
                            <span>TIR:</span>
                            <span style="color: #4caf50; font-weight: 600;">{day_data['tir']:.0f}%</span>
                        </div>
                        <div class="metric-row">
                            <span>Âπ≥Âùá:</span>
                            <span>{day_data['mean_glucose']:.1f}</span>
                        </div>
                        <div class="metric-row">
                            <span>CV:</span>
                            <span>{day_data['cv']:.1f}%</span>
                        </div>
                    </div>
                </div>
"""

        html += """
            </div>
        </div>

        <!-- È°µËÑö -->
        <div style="margin-top: 50px; padding-top: 20px; border-top: 1px solid #e0e0e0; font-size: 12px; color: #666;">
            <p><strong>Â£∞Êòé:</strong> Êú¨Êä•Âëä‰ªÖ‰æõÂåªÁñó‰∏ì‰∏ö‰∫∫ÂëòÂèÇËÄÉÔºå‰∏çËÉΩÊõø‰ª£ÂåªÁñóËØäÊñ≠„ÄÇÂÖ∑‰ΩìÊ≤ªÁñóÊñπÊ°àËØ∑Âí®ËØ¢ÂåªÁîü„ÄÇ</p>
            <p>Êä•ÂëäÁîüÊàêÊó∂Èó¥: """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + """</p>
            <p>Êä•ÂëäÁâàÊú¨: Agent_ZS v2.0 Enhanced (Âü∫‰∫éGPlusÊ†∑Âºè)</p>
        </div>
    </div>

    <script>
        // AGP Chart
        const agpCtx = document.getElementById('agpChart').getContext('2d');
        const agpData = """ + json.dumps(agp) + """;

        new Chart(agpCtx, {
            type: 'line',
            data: {
                labels: agpData.time_points.map(t => {
                    const hour = Math.floor(t);
                    const minute = Math.round((t - hour) * 60);
                    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                }),
                datasets: [
                    {
                        label: '95th percentile',
                        data: agpData.p95,
                        borderColor: 'rgba(100, 181, 246, 0.3)',
                        backgroundColor: 'rgba(100, 181, 246, 0.1)',
                        fill: '+1',
                        borderWidth: 1,
                        pointRadius: 0
                    },
                    {
                        label: '75th percentile',
                        data: agpData.p75,
                        borderColor: 'rgba(33, 150, 243, 0.6)',
                        backgroundColor: 'rgba(33, 150, 243, 0.3)',
                        fill: '+1',
                        borderWidth: 1,
                        pointRadius: 0
                    },
                    {
                        label: 'Median (50th)',
                        data: agpData.p50,
                        borderColor: 'rgba(25, 118, 210, 1)',
                        backgroundColor: 'transparent',
                        borderWidth: 3,
                        pointRadius: 0
                    },
                    {
                        label: '25th percentile',
                        data: agpData.p25,
                        borderColor: 'rgba(33, 150, 243, 0.6)',
                        backgroundColor: 'rgba(33, 150, 243, 0.3)',
                        fill: '+1',
                        borderWidth: 1,
                        pointRadius: 0
                    },
                    {
                        label: '5th percentile',
                        data: agpData.p5,
                        borderColor: 'rgba(100, 181, 246, 0.3)',
                        backgroundColor: 'rgba(100, 181, 246, 0.1)',
                        fill: false,
                        borderWidth: 1,
                        pointRadius: 0
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    title: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Êó∂Èó¥'
                        },
                        ticks: {
                            maxTicksLimit: 12
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Ë°ÄÁ≥ñ (mmol/L)'
                        },
                        min: 2,
                        max: 16,
                        ticks: {
                            stepSize: 2
                        }
                    }
                },
                annotation: {
                    annotations: {
                        targetRange: {
                            type: 'box',
                            yMin: 3.9,
                            yMax: 10.0,
                            backgroundColor: 'rgba(76, 175, 80, 0.1)',
                            borderColor: 'rgba(76, 175, 80, 0.5)',
                            borderWidth: 1
                        }
                    }
                }
            }
        });

        // Daily Charts
        const dailyData = """ + json.dumps(daily_data[:14]) + """;

        dailyData.forEach((day, index) => {
            const ctx = document.getElementById(`dailyChart${index}`).getContext('2d');

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: day.timestamps,
                    datasets: [{
                        data: day.glucose_values,
                        borderColor: 'rgba(33, 150, 243, 1)',
                        backgroundColor: 'rgba(33, 150, 243, 0.1)',
                        borderWidth: 1.5,
                        pointRadius: 0,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: false }
                    },
                    scales: {
                        x: { display: false },
                        y: {
                            display: false,
                            min: 2,
                            max: 16
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>
"""

        return html


def generate_enhanced_report(filepath: str, patient_id: str = None,
                            patient_info: Dict = None, medication_data: Dict = None,
                            output_path: str = None) -> str:
    """
    ‰æøÊç∑ÂáΩÊï∞ÔºöÁîüÊàêÂ¢ûÂº∫ÁâàCGMÊä•Âëä

    Args:
        filepath: Ë°ÄÁ≥ñÊï∞ÊçÆCSVÊñá‰ª∂Ë∑ØÂæÑ
        patient_id: ÊÇ£ËÄÖID
        patient_info: ÊÇ£ËÄÖ‰ø°ÊÅØÂ≠óÂÖ∏ (name, age, genderÁ≠â)
        medication_data: Áî®ËçØ‰ø°ÊÅØ
        output_path: ËæìÂá∫HTMLË∑ØÂæÑ

    Returns:
        ÁîüÊàêÁöÑHTMLÊñá‰ª∂Ë∑ØÂæÑ
    """
    generator = ZSHMCReportGeneratorEnhanced()
    return generator.generate_html_report(filepath, patient_id, patient_info,
                                         medication_data, output_path)


# Á§∫‰æãÁî®Ê≥ï
if __name__ == "__main__":
    # Á§∫‰æãÔºöÁîüÊàêÊä•Âëä
    example_patient_info = {
        "name": "Âº†‰∏â",
        "age": 45,
        "gender": "Áî∑"
    }

    # ÂÅáËÆæÊï∞ÊçÆÊñá‰ª∂Ë∑ØÂæÑ
    data_file = "cgm_data.csv"

    # ÁîüÊàêÊä•Âëä
    try:
        html_path = generate_enhanced_report(
            filepath=data_file,
            patient_id="P001",
            patient_info=example_patient_info,
            output_path="CGM_Report_Enhanced.html"
        )
        print(f"‚úÖ Êä•ÂëäÁîüÊàêÊàêÂäü: {html_path}")
        print(f"üí° ËØ∑Âú®ÊµèËßàÂô®‰∏≠ÊâìÂºÄÊ≠§Êñá‰ª∂ÔºåÁÑ∂Âêé‰ΩøÁî® Cmd+P (Mac) Êàñ Ctrl+P (Windows) ÊâìÂç∞‰∏∫PDF")
    except Exception as e:
        print(f"‚ùå Êä•ÂëäÁîüÊàêÂ§±Ë¥•: {e}")
